// Package controller provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package controller

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Reason string `json:"reason"`
}

// TokensResponse defines model for TokensResponse.
type TokensResponse struct {
	AccessToken string `json:"access_token"`
}

// UserGUIDResponse defines model for UserGUIDResponse.
type UserGUIDResponse struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// IssueTokensParams defines parameters for IssueTokens.
type IssueTokensParams struct {
	Guid openapi_types.UUID `form:"guid" json:"guid"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Деавторизация пользователя
	// (POST /auth/logout)
	Logout(ctx echo.Context) error
	// Выдать новую пару токенов для пользователя
	// (POST /auth/tokens)
	IssueTokens(ctx echo.Context, params IssueTokensParams) error
	// Обновить пару токенов
	// (POST /auth/tokens/refresh)
	RefreshTokens(ctx echo.Context) error
	// Получить GUID текущего пользователя
	// (GET /auth/user/guid)
	GetUserGUID(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// IssueTokens converts echo context to params.
func (w *ServerInterfaceWrapper) IssueTokens(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params IssueTokensParams
	// ------------- Required query parameter "guid" -------------

	err = runtime.BindQueryParameter("form", true, true, "guid", ctx.QueryParams(), &params.Guid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter guid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IssueTokens(ctx, params)
	return err
}

// RefreshTokens converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshTokens(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RefreshTokens(ctx)
	return err
}

// GetUserGUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserGUID(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserGUID(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/logout", wrapper.Logout)
	router.POST(baseURL+"/auth/tokens", wrapper.IssueTokens)
	router.POST(baseURL+"/auth/tokens/refresh", wrapper.RefreshTokens)
	router.GET(baseURL+"/auth/user/guid", wrapper.GetUserGUID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWzW7bxhN/lcX+/wcHoEW5SS+8uWgbqOnByAdawDUChlpbTCyS2V0aUA0B+ijqBA5i",
	"wOi1MdC+AK2GsCJH8ivMvFExS9KyTUmugdbwjdLO7uzM72N2l3thMwoDEWjFnV2uvIZouubzGylD+Vio",
	"KAyUoD8iGUZCal+YZSlcFQb0pVuR4A5XWvrBFm+3LS7F69iXos6d9SJuwyriwhcvhad52+JPw1ciUPNT",
	"uJ4nlHquKez6RJeiZ6V7poR8+Kz29fyEsRLyuV+nz81QNl3NHR7Hfp1b1+QuNpbTti2uhBdLX7eeUG+z",
	"RKuR/0i0VmPdoF9+wB3eEG5dSG7xwG3SAT8ur67Vlh+J1jS5a3ZRKV8JVwpZ7H9hfn1b3Pi7H55yK0OS",
	"dmWr01MaWke8TRfzg82Q9teF8qQfaZ/w5KtrNQYf4RQPGCTYxx6kMMYeDPEXGMIIEvwVhjBkcAYTOMV3",
	"cAITGEBiAk8hhU9sCQa4Dx8hwT1ILAYTOIaxiaL1MQwhpX+xBye4DwOGPZjAyCxNYGAVR/dxrwhnBNy9",
	"yk8B1eHrbSqEymdPhNzxPcFW12rc4jtCqqyKlUq1UqVWhZEI3MjnDr9fqVbuc4tHrm4YFGw31g17O9wK",
	"Y23IECpd7gf8SZVQPyDFHoMBdiFlUmxKoRrL9AO72F3QEjxgS3OLzWsiFrqUsFbnDv8+uxJxLKOque4X",
	"1QezboddOIMU39B5VPCD6gqFeWGgRWDqcaNo2/fM8fbLXLSZ0Onr/1Jscof/z546gZ3bgH3ZAwxprqT/",
	"HVJIYEBFYQeGReUwvkR97qzvXiLt+kZ7w+IqbjZd2aJzfiudY3hGJJzTVJMgg9BoXi2A8BAmcAID7ECC",
	"byHJgDT9xz6+pxQJdrDPMg+xc3CvQHWuinkoY5dhnxRCt4cxjHEfPhvmVhj8gR1I4Rj7JrkR2QhO8T3u",
	"zWJATalYZP5oGCvdptBCKtNI4xevYyFbU7vYymxqakpaxsK6APN1hrZRYlv1X6PRFaOfxaMjQgCSUstz",
	"I4ExJBm5q7dM7hER0mA3wp6B9BMz+J5hBybYvX3JfcA3MIRjItpih16CMaQwgBQ7+cUv0u5eWaEXx1JJ",
	"oYe5pffw3Uzt3EwsJfUWolug4g/TMZKb8Vy94n6FwZFxEpofn3PNn7v2eSAjr2E0E5fDYLvFvDB85QuL",
	"QZIfXoo14P9FVZmrEArUsVD6Pxu8Z8n5cZb3XNB3UWlXh3Ryd5l9w9ky5c0wY+9syl6gJL3nbGOpzi7f",
	"Ev90pJDVzx8PtFAmFfbZUnb7mU+Bh0IX79b/kjelt/EMeBZWd6deHhb/8lbnxCHBiD0zJWjsHxDakwtk",
	"Nq/ETm7FyQ3pe3T+GM7oa3AwfR9hH99CSm60yGhNNrlTPB9iuc0dbruRb++s8PZG++8AAAD//zvENQUF",
	"DgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
