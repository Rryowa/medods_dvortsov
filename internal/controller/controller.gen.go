// Package controller provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package controller

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BasicAuthScopes  = "BasicAuth.Scopes"
)

// Defines values for RefreshTokensFormdataBodyGrantType.
const (
	RefreshToken RefreshTokensFormdataBodyGrantType = "refresh_token"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Reason string `json:"reason"`
}

// LogoutRequest defines model for LogoutRequest.
type LogoutRequest struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// TokenPairResponse defines model for TokenPairResponse.
type TokenPairResponse struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
}

// TokenRefreshRequest defines model for TokenRefreshRequest.
type TokenRefreshRequest struct {
	AccessToken  *string `json:"access_token,omitempty"`
	RefreshToken string  `json:"refresh_token"`
}

// UserGUIDResponse defines model for UserGUIDResponse.
type UserGUIDResponse struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// IssueTokensParams defines parameters for IssueTokens.
type IssueTokensParams struct {
	// UserId GUID пользователя
	UserId openapi_types.UUID `form:"user_id" json:"user_id"`
}

// RefreshTokensFormdataBody defines parameters for RefreshTokens.
type RefreshTokensFormdataBody struct {
	GrantType    RefreshTokensFormdataBodyGrantType `form:"grant_type" json:"grant_type"`
	RefreshToken string                             `form:"refresh_token" json:"refresh_token"`
}

// RefreshTokensFormdataBodyGrantType defines parameters for RefreshTokens.
type RefreshTokensFormdataBodyGrantType string

// LogoutJSONRequestBody defines body for Logout for application/json ContentType.
type LogoutJSONRequestBody = LogoutRequest

// RefreshTokensJSONRequestBody defines body for RefreshTokens for application/json ContentType.
type RefreshTokensJSONRequestBody = TokenRefreshRequest

// RefreshTokensFormdataRequestBody defines body for RefreshTokens for application/x-www-form-urlencoded ContentType.
type RefreshTokensFormdataRequestBody RefreshTokensFormdataBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Деавторизация пользователя
	// (POST /auth/logout)
	Logout(ctx echo.Context) error
	// Выдать новую пару токенов для пользователя
	// (POST /auth/token/issue)
	IssueTokens(ctx echo.Context, params IssueTokensParams) error
	// Обновить пару токенов
	// (POST /auth/token/refresh)
	RefreshTokens(ctx echo.Context) error
	// Получить GUID текущего пользователя
	// (GET /auth/user/guid)
	GetUserGUID(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// IssueTokens converts echo context to params.
func (w *ServerInterfaceWrapper) IssueTokens(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params IssueTokensParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IssueTokens(ctx, params)
	return err
}

// RefreshTokens converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshTokens(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RefreshTokens(ctx)
	return err
}

// GetUserGUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserGUID(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserGUID(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/logout", wrapper.Logout)
	router.POST(baseURL+"/auth/token/issue", wrapper.IssueTokens)
	router.POST(baseURL+"/auth/token/refresh", wrapper.RefreshTokens)
	router.GET(baseURL+"/auth/user/guid", wrapper.GetUserGUID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX227bRhN+lcX+/4UDUIc0udKdg7aBml4YToIWcA2DpsYWU4mkd5d2BUOADkWTwEED",
	"GLlNArQvQKsRrNiV/Aqzr9AnKWZJWidKTgo78N2SnN2dw/d9Mzzkjl8PfA88JXnpkEunCnXbLL8Rwhfr",
	"IAPfk0AvAuEHIJQL5rMAW/oerVQjAF7iUgnX2+XNpsUF7IWugAovbaR2m1Zq528/A0fxpsW/93f9UK3D",
	"XghSzd8QShBbboWWO76o24qXeBi6FW5dcWW6MevOJ/7P4K3Z7pLIbMcBKbcUWWbER3ftCJDVhRYz7kyd",
	"N7t7oY/rsdnC7Fy3l1e79VSCePi0/PXizN1AxZoWl+CEwlWNx4TN+KLVwH0EjdVQVenJ9XiJV8GugOAW",
	"9+w6HfBjbnWtnHsEjfHlttlFoTywpeuk2w3m6fs2vR2bV5UKjDHYAkRqvW2evk3D++6HJ9yaOMJ8nT2D",
	"onC9HZ/2V0A6wg2US+Thq2tlhh/wXL9mGOmu7mAfh7qDA/0rDvAMI/0bDnDA8AJHeK5f4SmOsIeRMTzH",
	"Pn5kK9jTR/gBI/0cI4vhCE9waKzo+xAH2Ke3uoOn+gh7THdwhGfm0wh7Vnp0Vz9PzRlV+U7+J0KrclWN",
	"AqHw2WMQ+64DbHWtzC2+D0LGUdzNF/NFSpUfgGcHLi/xe/li/h63eGCrqilZwQ5VtVAzlDfI8WNUT+cD",
	"/6RIKB/Y1x2GPd3GPkuwmaMH3dbtJSnRr9nKwmDv5BkeszR37J/WG5YgLw6WsGyTJ+UKLyXyxGOkglQP",
	"/EqDPHZ8T4FnnLeDoOY6ZkvhWSKHsYTS6v8CdniJ/68w1thCIrCFae1rThNCiRDMi5hoJn9fFe9npUu3",
	"8QL7+gUFSBW4Xyxem4/THcD4OHP9W+zjGY50S7dopTs41Ef4keEpRnihWzjS7ZjDYb1uiwbteYN9jLBH",
	"ldEtHJApgZwYsKCi5oQYP0adCq6UISwB0TGO8BR7uoWRfolRDCWDAN3Vv9M9kW7pLos1tJDAawYsl7xc",
	"hDPdZrpLHDXRDk3ofxvuZKGpTD4bZZeGFsKugwIheWlj1n86YnEyrFjv9kIQjbHcpQo6CyNrotZXafLm",
	"HOSuD0vzfTcLT++pMBjNVSJROBxidJtBnjQqU9LJFrWxSbmd4MBxotgd/SoTmJ+HxDl+JIBewpB34yaR",
	"SO1CLugjczGbGhDyDP8w6TjRXbPddFRmusSKU3PBU1tupZCsJDgC1J0sWiRjziUxbkJrs+YpStnkib/k",
	"Dg4OcsSQXChq4Dl+BSrTV0zPOrvC9tRWTKFDDl5YXzZF/eexbOKaq0fHT+kit4XSs2PKrSU2eXX3C3r1",
	"Tr/AAZ5QY1k6E36m5IwZP4hlJ1trJrSEWkphN4zn+V341Ea7tHvFUhJrTW5CY7psJR6zM0XiIaj054Pf",
	"IKDnfnAyyrO8N39xsLydG6aMQzicnbreXw75cflNHMbvM93VL7GPf+FoWYeZBdvEL1SCNRD76TwTihov",
	"8QL9CjQ3m/8GAAD//8ncGUtlEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
